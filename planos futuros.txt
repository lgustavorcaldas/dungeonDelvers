Workflow Dungeon Delvers:
Correções:
// - Tamanho dos elementos, basicamente tem que dar zoom out ate 67% pra funcionar (podemos ou mexer no tamanho, ou adicionar algo que ja da esse zoom out automatico)
// - O bottomLog de combate precisa ser corrigido, tem coisa que adiciona texto ali (tipo o The NPC is Dead), ai precisava olhar pra ver como fica melhor
- pra apresentacao, talvez diminuir os setTimeouts que tem, pra dar pra aproveitar melhor o tempo
- Balanceamento, pq ta muito dificil chegar na manticora, e impossivel matar ela, ai dar um reabalance

Implementações
// - Float Damage Numbers quando alguem tomar dano na cartinha;
- Adicionar um mapa após a transição de texto;
- 1 botao com uma habilidade especial de cada classe (Shield Wall pro warrior, Execute pro slayer, Magic Blast pra mage, ai a gente faz os efeitinhos especiais)
- 1 botao de usar item (talvez pra dar usar um fade out nos botoes que ja existem e dar fade in em botoes que usam items, e fazer eles desaparecerem depois de usar, ai da pra pensar)
- Algoritmo de roguelite, gerando diferentes monstros por niveis
- Adicionar um icone com o dano de cada personagem ali na carta, pra nao ficar so o modificador toHit, e pegar o damage mesmo;
- Cards narrativos: a cada level novo, chamar um card narrativo com botoes para escolher opcoes. O texto narrativo vai apresentar certas consequencias, e podemos animar o que acontece(exemplo, card de armadilha, contendo um textinho descrevendo a armadilha, e botoes para escolgher como reagir a essa armadilha, ao apertar o botao, o d20 eh rolado, e rodamos animacao conforme o resultado.)
Modificações
- Revisar o botomLog, pra gente conseguir encaixar os textos narrativos e os items em um outro lugar e as coisas nao se misturarem de forma confusa
- No som da batalha, trocar o som de acerto de ataque dos personagens para combinar com a classe





class Items {
    constructor(_name) {
        this.name = _name
    }

    potion() {
        switch (this.name) {
            case "HalfPotionHP":
                player.hitPoints += 8
                bottomLog.innerHTML +=
                    `<br/><h4 id="hPotion">You found half a Health Potion.</br> Hit Points restored by 5.</h4>`;
                $("#hPotion").css("color", "green")
                //Hit points restore animation

                $(".heart").animate({
                    color: "green",
                }, 2500)
                setTimeout(() => {
                    floatingText("+" + 8, "floatingTextPlayer", "green")
                    logHP.innerHTML = player.hitPoints
                    addMusic("potionsound", false);
                }, 2500)
                $(".heart").effect("pulsate")
                $(".heart").animate({
                    color: "black",
                }, 5000)
                break;

            case "FullPotionHP":
                player.hitPoints += 15
                bottomLog.innerHTML +=
                    `<br/><h4 id="hPotion">You found a Full Health Potion.</br> Hit Points restored by 10.</h4>`;
                $("#hPotion").css("color", "green")
                //Hit points restore animation

                $(".heart").animate({
                    color: "green",
                }, 2500)
                setTimeout(() => {
                    floatingText("+" + 16, "floatingTextPlayer", "green")
                    logHP.innerHTML = player.hitPoints
                    addMusic("potionsound", false);
                }, 2500)
                $(".heart").effect("pulsate")
                $(".heart").animate({
                    color: "black",
                }, 5000)
                break;


        }
    }

    gold() {
        bottomLog.innerHTML +=
            `<br/><span id="goldBag">You found a small bag of gold.</span>`;
        $("#goldBag").css("color", "rgb(155,135,12)");
        addMusic("gold", false);
    }

}


    firstAbility() {
        switch (this.type) {
            case "Warrior":
                bottomLog.innerHTML +=
                `<br/><h4 id="abilityUse">You used Aimed Thrust! +3 chance to hit!</h4>`;
                player.attack.mod.toHit +=3
                //Animate Attack Mod

                break;

            case "Rogue":
                if (turno == true || turno == false){
                    abilityTurnCounter ++
                }
                bottomLog.innerHTML +=
                    `<br/><h4 id="abilityUse">While your enemy was distracted, you used Steal!</h4>`;
                randomizeRogueSteal(level)
                break;

            case "Wizard":
                if (turno == true || turno == false){
                    abilityTurnCounter ++
                }
                
                bottomLog.innerHTML +=
                    `<br/><h4 id="abilityUse">You used Arcane Shield, AC incresed by +2 for 10 turns!</h4>`;
                player.classResource -= 3
                player.armorClass += 2
                setTimeout(() => {
                    $("#logAC").animate({
                        color: "blue",
                    }, 10)
                    $(".shield").effect("bounce")
                    logAC.innerHTML = "+" + player.armorClass
                }, 2000)
                if (abilityTurnCounter >= 10){
                    player.armorClass -= 2
                    bottomLog.innerHTML +=
                    `<br/><h4 id="abilityUse">Arcane Shield Dissipated!</h4>`;
                    setTimeout(() => {
                        $("#logAC").animate({
                            color: "black",
                        }, 10)
                        $(".shield").effect("pulsate")
                        logAC.innerHTML = "+" + player.armorClass
                    }, 2000)
                }
                break;
        }
    }

    // secondAbility() {
    //     switch (this.type) {
    //         case "
    //     }
    // }

    // thirdAbility() {
    //     switch (this.type) {
    //         case "
    //     }
    // }